/* https://telegra.ph/Anons-191-Ochered-10-11
* https://medium.com/unilecs/task-70c015f82a8
* Двухсторонняя очередь (deque — double ended queue) — структура данных,
* в которой элементы можно добавлять и удалять как в начало, так и в конец.
* В некоторых языках программирования реализована в классическом варианте,
* в некоторых может быть реализована при помощи связного списка.
* Отлично дополняет классическую структуру данных - очередь, где
* возможно добавление только в конец, а выборка только с начала.
* И данная задача прекрасный пример работы с deque!
*
* Задача: в больнице большие очереди к врачам, т.к. врачей не хватает.
* Обычные граждане встают в конец очереди, а пенсионеры встают ровно в ее середину
* (при нечетной длине очереди, они встают сразу за центром, т.е. при 5 встают за 3м).
* Вам необходимо написать программу для табло электронной очереди.
* Примечание: врачей в больнице так мало, что гарантируется, что очередь никогда не пуста.
* Входные данные: дан список команд в следующем формате:
- “+ {i}” — гражданин с номером i встал в конец очереди.
- “* {i}” — пенсионер с номером i встал в середину очереди.
- “-” — первый гражданин в очереди зашел к врачу.
Вывод: для каждого запроса формата “-” табло должно вывести номер гражданина, который должен зайти к врачу.
Пример:
1. [ “+1”, “+2”, “-”, “+3”, “+4”, “-”, “-” ]
Output: 1 2 3
2. [ “+1”, “+2”, “*3”, “-”, “+4”, “*5”, “-”, “-”, “-”, “-” ]
Output: 1 3 2 5 4
*
* */


const getNumberInQuery = (array) => {
    if (!Array.isArray(array) || array.length === 0) return false;

    let counter = 0;
    let result = array.filter(i => i !== '-');

    const switchArray = (array) => {
        const result = [];

        array.map(i => {
            switch (i[0]) {
                case '+':
                    result.push(i);
                    break;
                case '*':
                    result.length % 2 ? result.splice(Math.round((result.length + 1) / 2), 0, i) : result.splice(Math.round((result.length) / 2), 0, i);
                    break;
            }
        });

        return result;
    };

    result = switchArray(result);

    // если количество результатов не соответствует кол-ву запросов '-', убираем их
    const removeQuerySymbol = (array) => {
        return array.map(item => {
            if (item === '-') {
                return counter++;
            }
        });
    };

    const removeUndefined = (array) => array.filter(i => i !== undefined);
    const countOfRenderedItems = removeUndefined(removeQuerySymbol(array)).length;

    result = result.splice(0, countOfRenderedItems);

    return result.map(i => i[1]).join(' ');
};

console.log(getNumberInQuery(['+1', '+2', '-', '+3', '+4', '-', '-'])); // 1 2 3
console.log(getNumberInQuery(['+1', '+2', '-', '+3', '+4', '-', '-', '-'])); // 1 2 3 4
console.log(getNumberInQuery(['+1', '+2', '*3', '-', '+4', '*5', '-', '-', '-'])); // Output: 1 3 2 5 4
